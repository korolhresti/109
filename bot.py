import asyncio
import logging
import logging.handlers
from datetime import datetime, timedelta, timezone, date
import os
import sys

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hlink

from aiohttp import ClientSession
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –Ü–º–ø–æ—Ä—Ç –ª–∏—à–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –∑ database.py
from database import get_db_pool, get_all_active_sources, add_news_item, update_source_last_parsed, get_one_unsent_news_item, mark_news_as_sent, get_source_by_id, get_bot_setting

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ web_parser
import web_parser

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

stream_handler = logging.StreamHandler()
stream_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
stream_handler.setFormatter(formatter)
logger.addHandler(stream_handler)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–∞ ID –∫–∞–Ω–∞–ª—É –∑ config.py
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü—ñ –∑–º—ñ–Ω–Ω—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ —É –≤–∞—à–æ–º—É —Ñ–∞–π–ª—ñ .env –∞–±–æ config.py
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
NEWS_CHANNEL_ID = os.getenv("NEWS_CHANNEL_ID")
if NEWS_CHANNEL_ID:
    NEWS_CHANNEL_ID = int(NEWS_CHANNEL_ID)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –æ–¥–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
async def parse_single_source_job(source):
    """
    –ü–∞—Ä—Å–∏—Ç—å –æ–¥–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –Ω–æ–≤–∏–Ω —ñ –∑–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤—ñ —Å—Ç–∞—Ç—Ç—ñ –≤ –ë–î.
    """
    logger.info(f"Start parsing source: {source['source_name']} ({source['source_url']})")
    start_time = time.time()
    try:
        recent_news = await web_parser.fetch_recent_news_from_source(source['source_url'], limit=10)
        new_articles_count = 0
        for news_item in recent_news:
            if news_item:
                # –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–Ω—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
                success = await add_news_item(
                    source_id=source['id'],
                    title=news_item.get('title'),
                    content=news_item.get('content'),
                    source_url=news_item['source_url'],
                    image_url=news_item.get('image_url'),
                    published_at=news_item.get('published_at')
                )
                if success:
                    new_articles_count += 1
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É
        await update_source_last_parsed(source['id'])
        end_time = time.time()
        duration_ms = int((end_time - start_time) * 1000)
        logger.info(f"Finished parsing source: {source['source_name']}. New articles: {new_articles_count}. Duration: {duration_ms}ms.")

    except Exception as e:
        logger.error(f"Error parsing source {source['source_name']}: {e}", exc_info=True)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
async def parse_all_sources_job():
    """
    –ü–∞—Ä—Å–∏—Ç—å —É—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ –Ω–æ–≤–∏–Ω.
    """
    pool = await get_db_pool()
    sources = await get_all_active_sources()
    logger.info(f"Starting to parse {len(sources)} active sources.")
    
    tasks = [parse_single_source_job(source) for source in sources]
    await asyncio.gather(*tasks)

    logger.info("Finished parsing all active sources.")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –æ–¥–Ω—ñ—î—ó –Ω–æ–≤–∏–Ω–∏ –≤ –∫–∞–Ω–∞–ª
async def publish_news_to_channel_job():
    """
    –í–∏–±–∏—Ä–∞—î –æ–¥–Ω—É –Ω–µ–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—É –Ω–æ–≤–∏–Ω—É –∑ –ë–î —ñ –ø—É–±–ª—ñ–∫—É—î —ó—ó –≤ –∫–∞–Ω–∞–ª.
    """
    if not NEWS_CHANNEL_ID:
        logger.warning("NEWS_CHANNEL_ID is not set. Skipping news publishing.")
        return

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–¥–Ω—É –Ω–µ–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—É –Ω–æ–≤–∏–Ω—É
        news_item = await get_one_unsent_news_item()
        
        if news_item:
            source = await get_source_by_id(news_item['source_id'])
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ –Ω–æ–≤–∏–Ω–∏
            source_link = hlink(source['source_name'], news_item['source_url'])

            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message_text = (
                f"<b>{news_item['title']}</b>\n\n"
                f"{news_item['content']}\n\n"
                f"üîó –î–∂–µ—Ä–µ–ª–æ: {source_link}"
            )
            
            # –Ø–∫—â–æ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ
            if news_item['image_url']:
                await bot.send_photo(
                    chat_id=NEWS_CHANNEL_ID,
                    photo=news_item['image_url'],
                    caption=message_text,
                    parse_mode=ParseMode.HTML
                )
            else:
                await bot.send_message(
                    chat_id=NEWS_CHANNEL_ID,
                    text=message_text,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
            
            # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–Ω—É —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—É
            await mark_news_as_sent(news_item['id'])
            logger.info(f"Successfully published news item ID {news_item['id']} to channel {NEWS_CHANNEL_ID}")
        else:
            logger.info("No unsent news items found to publish.")
    except Exception as e:
        logger.error(f"Error publishing news to channel: {e}", exc_info=True)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É APScheduler
async def start_worker_jobs():
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å (APScheduler).
    """
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å –¥–æ –ë–î
    await get_db_pool()

    scheduler = AsyncIOScheduler()

    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–æ—Ç–∞
    parse_interval_minutes = int((await get_bot_setting('NEWS_PARSE_INTERVAL_MINUTES')) or '15')
    publish_interval_minutes = int((await get_bot_setting('NEWS_PUBLISH_INTERVAL_MINUTES')) or '5')
    
    logger.info(f"Scheduling news parsing job every {parse_interval_minutes} —Ö–≤–∏–ª–∏–Ω.")
    scheduler.add_job(parse_all_sources_job, 'interval', minutes=parse_interval_minutes, id='parse_job')
    
    logger.info(f"Scheduling news publishing job every {publish_interval_minutes} —Ö–≤–∏–ª–∏–Ω.")
    scheduler.add_job(publish_news_to_channel_job, 'interval', minutes=publish_interval_minutes, id='publish_job')
    
    scheduler.start()
    logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ.")
    try:
        # –ó–∞–ª–∏—à–∞—î–º–æ —Ü–∏–∫–ª –ø–æ–¥—ñ–π –∑–∞–ø—É—â–µ–Ω–∏–º –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
        while True:
            await asyncio.sleep(3600) # –ß–µ–∫–∞—î–º–æ –≥–æ–¥–∏–Ω—É, –∞–±–æ –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ
    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()
        logger.info("–í–æ—Ä–∫–µ—Ä –±–æ—Ç–∞ –≤–∏–º–∫–Ω–µ–Ω–æ.")


if __name__ == "__main__":
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
    load_dotenv()
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–ó–º—ñ–Ω–Ω–∞ –æ—Ç–æ—á–µ–Ω–Ω—è TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ NEWS_CHANNEL_ID –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ config.py
    if not NEWS_CHANNEL_ID or NEWS_CHANNEL_ID == 0:
        logger.warning("–ó–º—ñ–Ω–Ω–∞ –æ—Ç–æ—á–µ–Ω–Ω—è NEWS_CHANNEL_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î 0. –ù–æ–≤–∏–Ω–∏ –Ω–µ –±—É–¥—É—Ç—å –ø–æ—Å—Ç–∏—Ç–∏—Å—å –≤ –∫–∞–Ω–∞–ª.")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–æ—Ä–∫–µ—Ä, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç "worker"
    if len(sys.argv) > 1 and sys.argv[1] == "worker":
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –≤–æ—Ä–∫–µ—Ä –±–æ—Ç–∞ (–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫)...")
        asyncio.run(start_worker_jobs()) # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –≤–æ—Ä–∫–µ—Ä–∞
    else:
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ (—Ü—è —á–∞—Å—Ç–∏–Ω–∞ –∑–∞—Ä–∞–∑ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
        # –í–∏–¥–∞–ª–µ–Ω–æ, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ `Procfile.txt`
        pass
